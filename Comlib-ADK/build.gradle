import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'


archivesBaseName = 'comlib-adk'
//jar.baseName = 'comlib-adk'
//version = '0.3.0'

repositories {
    jcenter()
}

dependencies {
    compile fileTree(dir: new File(rootDir, 'library/util'), include: '*.jar')
    compile fileTree(dir: new File(rootDir, 'library/rescue/core'), include: '*.jar')
    compile fileTree(dir: new File(rootDir, 'library/rescue/util'), include: '*.jar')
    compile project(':Comlib')
    testCompile 'junit:junit:4.11'
}

[compileJava, compileTestJava].each {
    it.options.encoding = 'UTF-8'
    it.options.compilerArgs += ['-source', '1.8', '-target', '1.8', '-Xlint:unchecked']
}
javadoc.options.encoding = 'UTF-8'

/*build.mustRunAfter 'clean'

task makeArchive(type: Zip, dependsOn: [clean, build]) {
    destinationDir = new File(buildDir, 'libs')
    archiveName = jar.baseName + '-src.zip'
    into('comlib') {
        from 'src/main/java/comlib'
    }
}*/

/*task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}*/

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

build.mustRunAfter 'clean'

task makeArchive(dependsOn: [clean, build]) << {
}

task start (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "comlib.adk.launcher.Main"
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
    jvmArgs '-Xms512m', '-Xmx4g'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}
// create syntastic classpath files
task vimFiles << {
  def classpathFiles = new HashSet<String>()
  def addJars = { proj ->
    proj.configurations.each { conf ->
      conf.each { jar ->
        classpathFiles.add(jar)
      }
    }
    proj.sourceSets.each { srcSet ->
      srcSet.java.srcDirs.each { dir ->
        println dir.absolutePath
        classpathFiles.add(dir.absolutePath)
      }
    }
  }
  getChildProjects().each { proj ->
    addJars(proj.value)
  }
  addJars(rootProject)

  new File(rootProject.projectDir.absolutePath + "/.syntastic-classpath").text = classpathFiles.collect().join("\n")

  // create .vimrc.local
  new File(rootProject.projectDir.absolutePath + "/.vimrc.local").text = """
let g:syntastic_java_javac_config_file_enabled = 1
let g:syntastic_java_javac_config_file = '.syntastic-classpath'
"""

  println """Created .vimrc.local... don't forget to source this in your vim config"""
}

